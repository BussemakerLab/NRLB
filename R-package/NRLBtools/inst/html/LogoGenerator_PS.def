% PostScript variables & procedures for REDUCE Suite v2.0: Xiang-Jun Lu <xl2134@columbia.edu>

% prolog part #1: simple definitions

% +++++++++++++++++++++++++ cm to PS point unit conversion +++++++++++++++++++++++++
/ppcm {72 2.54 div} bind def
/cm {ppcm mul} bind def
/thinDash {[1 1] 0 setdash 0.66 setlinewidth} bind def

% +++++++++++++++++++++++++ default color set +++++++++++++++++++++++++
/NEG_SAT 0.33 def

/black   [0.0      0.0 0.0] def % [0.0 0.0 0.0]
/white   [0.0      0.0 1.0] def % [1.0 1.0 1.0]

/green   [0.333333 1.0 0.8] def % [0 0.8 0]
/blue    [0.666667 1.0 0.8] def % [0 0 0.8]
/orange  [0.116667 1.0 1.0] def % [1 0.7 0]
/red     [0        1.0 0.8] def % [0.8 0 0]
/cyan    [0.5      1.0 1.0] def % [0   1 1]

/m_green   [0.333333 NEG_SAT  0.8] def
/m_blue    [0.666667 NEG_SAT  0.8] def
/m_orange  [0.116667 NEG_SAT  1.0] def
/m_red     [0        NEG_SAT  0.8] def
/m_cyan    [0.5      NEG_SAT  1.0] def

/defaultColor black def

/colorDict <<
    (A) green       (a) m_green
    (C) blue        (c) m_blue
    (G) orange      (g) m_orange
    (T) red         (t) m_red
    (U) cyan        (u) m_cyan
    (X) white
>> def

% +++++++++++++++++++++++++ set font sizes +++++++++++++++++++++++++
/fontsize      12 def
/titleFontsize 14 def
/smallFontsize  6 def

%==============> prolog part #2: Case Specific Settings [LogoGenerator_CSC]

% prolog part #3: more elaborate procedures

% +++++++++++++++++++++++++ define margins +++++++++++++++++++++++++
/drawBox {moveto lineto lineto lineto closepath stroke} bind def
/drawLine {moveto lineto stroke} bind def

/contentWidth
    leftMargin rightMargin add
    logoWidth exch sub
def
/contentHeight
    topMargin bottomMargin add
    logoHeight exch sub
def

/negHalfStackMargin stackMargin 2 div neg def
/x0 stackMargin neg def

% +++++++++++++++++++++++++ y-axis labeling +++++++++++++++++++++++++
/yaxisHeight
    logoHeight
    bottomMargin sub
    topMargin sub
def

/ticWidth fontsize 2 div def
/pointsPerBit yaxisHeight yaxisBits div def

% +++++++++++++++++++++++++ boxing character +++++++++++++++++++++++++
/isBoxed   % s or f ==> true; n ==> false
    showingBox (s) eq
        showingBox (f) eq or
    {true} {false}
    ifelse
def

% do not add space around characters if characters are boxed
/charRightMargin
    isBoxed {0.0} {stackMargin} ifelse
def
/charTopMargin
    isBoxed {0.0} {stackMargin} ifelse
def

% +++++++++++++++++++++++++ define character width +++++++++++++++++++++++++
/charWidth
    logoWidth
    leftMargin sub
    rightMargin sub
    charsPerLine div
    charRightMargin sub
def
/charWidth4 charWidth 4 div def
/charWidth2 charWidth 2 div def

/stackWidth
    charWidth charRightMargin add
def

/numberFontSize
    fontsize charWidth lt {fontsize} {charWidth} ifelse
def

% +++++++++++++++++++++++++ movements to place 5' & 3' symbols +++++++++++++++++++++++++
/leftEndDeltaX  fontsize neg         def
/leftEndDeltaY  fontsize 1.5 mul neg def
/rightEndDeltaX fontsize 0.25 mul    def
/rightEndDeltaY leftEndDeltaY        def

% +++++++++++++++++++++++++ outline width is proportional to charWidth,
%                           but no less that 1 point +++++++++++++++++++++++++
/outlineWidth
    charWidth 32 div dup 1 gt {} {pop 1} ifelse
def

% +++++++++++++++++++++++++ more complicated procedures +++++++++++++++++++++++++
/startLogo {
    save   % save state
    gsave

    gsave  % print logo title at top center
        setTitleFont

        logoWidth 2 div
        logoTitle stringwidth pop 2 div sub
        logoHeight logoLines mul
        titleFontsize sub
        moveto

        logoTitle show
    grestore

    gsave  % print x-axis label at bottom center
        setStringFont

        logoWidth 2 div
        xaxisLabel stringwidth pop 2 div sub
        fontsize 3 div
        moveto

        xaxisLabel show
    grestore

    showFineprint {  % show fineprint
        gsave
            setSmallFont
            logoWidth
            fineprint stringwidth pop sub
            smallFontsize sub
            smallFontsize 3 div
            moveto

            fineprint show
        grestore
    } if

    % move to lower left corner of last line, first stack
    leftMargin bottomMargin translate

    % move above first line, get ready for startLine
    0 logoLines logoHeight mul translate

    setLogoFont
} bind def

/endLogo {
    grestore
    showpage
    restore
} bind def

/startLine{
    % move down to the bottom of the line
    0 logoHeight neg translate

    gsave
        yaxis {makeYaxis} if
        xaxis {showLeftEnd} if
} bind def

/endLine{
        xaxis {showRightEnd} if
    grestore
} bind def

/makeYaxis {
    gsave
        stackMargin neg 0 translate
        showYaxisBar
        showYaxisLabel
    grestore
} bind def

/showYaxisBar {
    gsave
        setStringFont

        /str 10 string def  % string to hold number
        /smallgap stackMargin 2 div def

        gsave  % draw the first tic and bar
            ticWidth neg 0 moveto
            ticWidth 0 rlineto
            0 yaxisHeight rlineto
            stroke
        grestore

        % draw the tics: initial increment limit proc for
        0 yaxisTicBits yaxisBits abs {
            /loopnumber exch def

            % convert the number coming from the loop to a string and find its width
            loopnumber yoffset sub 10 str cvrs
            /stringnumber exch def  % string representing the number

            stringnumber stringwidth pop
            /numberwidth exch def  % width of number to show

            /halfnumberheight stringnumber charBoxHeight 2 div def

            numberwidth                     % move back width of number
            neg loopnumber pointsPerBit mul % shift on y axis
            halfnumberheight sub            % down half the digit

            moveto  % move back the width of the string

            ticWidth neg smallgap sub % move back a bit more
            0 rmoveto                 % move back the width of the tic

            stringnumber show
            smallgap 0 rmoveto        % make a small gap

            % now show the tic mark
            0 halfnumberheight rmoveto % shift up again
            ticWidth 0 rlineto
            gsave
                yoffset 0 gt {
                    loopnumber yoffset eq {
                        0 isBoxed {0.0} {negHalfStackMargin} ifelse rmoveto
                        contentWidth 0 rlineto thinDash stroke
                    } if
                } if
            grestore
            stroke
        } for
    grestore
} bind def

/showYaxisLabel {
    gsave
        setStringFont

        % how far we move left depends on the size of the tic labels.
        /str 10 string def       % string to hold number
        yaxisBits yaxisTicBits div cvi yaxisTicBits mul
        str cvs stringwidth pop
        ticWidth 2.5 mul add neg

        yaxisHeight
        yaxisLabel stringwidth pop
        sub 2 div

        translate
        90 rotate
        0 0 moveto

        yaxisLabel (ddG/RT) eq {
            setPrimeFont
            (DD) show
            /yaxisLabel (G/RT) def
            setStringFont
        } if

        yaxisLabel show
    grestore
} bind def

/startStack {
    xaxis {makeNumber} {pop} ifelse
    gsave
} bind def

/endStack {
    grestore
    stackWidth 0 translate
} bind def

% draw a character whose height is proportional to symbol bits
/makeSymbol {  % <charbits> <character> makeSymbol
    gsave
        /char exch def
        /bits exch def

        /bitsHeight bits pointsPerBit mul def

        /charHeight
            bitsHeight charTopMargin sub dup
            0.0 gt {} {pop 0.0} ifelse  % if neg replace with zero
        def

        charHeight 0.0 gt {
            char setCharColor
            charWidth charHeight char showChar

            showingBox (s) eq {  % unfilled box
                0 0 charWidth charHeight false showBox
            } if

            showingBox (f) eq { % filled box
                0 0 charWidth charHeight true showBox
            } if
        } if

    grestore

    0 bitsHeight translate
} bind def

/showChar { % <width> <height> <character> showChar
    gsave
        /tc exch def    % The character
        /ysize exch def % the y size of the character
        /xsize exch def % the x size of the character

        tc (a) eq {
            /tc (A) def
        } if

        tc (c) eq {
            /tc (C) def
        } if

        tc (g) eq {
            /tc (G) def
        } if

        tc (t) eq {
            /tc (T) def
        } if

        tc (u) eq {
            /tc (U) def
        } if

        /xmulfactor 1 def
        /ymulfactor 1 def

        % if ysize is negative, make everything upside down!
        ysize 0 lt {
            /ysize ysize abs def  % put ysize normal in this orientation
            xsize ysize translate
            180 rotate
        } if

        shrinking {
            xsize 1 shrink sub 2 div mul
            ysize 1 shrink sub 2 div mul translate
            shrink shrink scale
        } if

        % calculate the font scaling factors
        % loop twice to catch small correction due to first scaling
        2 {
            gsave
                xmulfactor ymulfactor scale

                ysize tc charBoxHeight  % desired size of character in points
                dup 0.0 ne {
                    div  % factor by which to scale up the character
                    /ymulfactor exch def
                } {pop pop} ifelse

                xsize tc charBoxWidth  % desired size of character in points
                dup 0.0 ne {
                    div  % factor by which to scale up the character
                    /xmulfactor exch def
                } {pop pop} ifelse
            grestore
        } repeat

        % adjust horizontal position if the symbol is an I
        tc (I) eq {
            charWidth 2 div  % half of requested character width
            tc charBoxWidth 2 div  % half of the actual character
            sub 0 translate
            /xmulfactor 1 def  % avoid x scaling for I
        } if

        % ---- Finally, draw the character
        newpath
        xmulfactor ymulfactor scale

        % move lower left corner of character to start point
        tc charBox pop pop  % llx lly: lower left corner
        exch neg exch neg
        moveto

        outline {  % outline characters
            outlineWidth setlinewidth
            tc true charpath
            gsave 1 setgray fill grestore
            clip stroke
        } {  % regular characters
            tc show
        } ifelse

    grestore
} bind def

/showBox {  % <x1> <y1> <x2> <y2> <filled> showBox
    gsave
        /filled exch def
        /y2 exch def
        /x2 exch def
        /y1 exch def
        /x1 exch def

        newpath
        x1 y1 moveto
        x2 y1 lineto
        x2 y2 lineto
        x1 y2 lineto
        closepath

        clip
        filled {fill} {0 setgray stroke} ifelse
    grestore
} bind def

/makeNumber {  % <number> makeNumber
    gsave
        setNumberFont
        stackWidth 0 translate
        90 rotate           % rotate so the number fits
        dup stringwidth pop % find the length of the number
        neg                 % prepare for move
        stackMargin sub     % move back a bit
        charWidth (0) charBoxHeight % height of numbers
        sub 2 div
        moveto              % move back to provide space
        show
    grestore
} bind def

/setIbeam{  % <heightInBits> setIbeam
    gsave
        % make an setIbeam of twice the given height in bits
        /height exch pointsPerBit mul def
        /heightDRAW height setIbeamFraction mul def

        setIbeamLineWidth setlinewidth
        setIbeamGray setgray

        charWidth2 height neg translate

        showIbar
        newpath
        0 0 moveto
        0 heightDRAW rlineto
        stroke

        newpath
        0 height moveto
        0 height rmoveto
        currentpoint translate
        stroke

        showIbar
        newpath
        0 0 moveto
        0 heightDRAW neg rlineto
        currentpoint translate
        stroke
    grestore
} bind def

/showIbar {  % make a horizontal bar
    gsave
        newpath
        charWidth4 neg 0 moveto
        charWidth4 0 lineto
        stroke
    grestore
} bind def

/showLeftEnd {
    gsave
        setStringFont
        leftEndDeltaX leftEndDeltaY moveto
        showEnds (d) eq {(5) show showPrime} if
        showEnds (p) eq {(N) show} if
    grestore
} bind def

/showRightEnd {
    gsave
        setStringFont
        rightEndDeltaX rightEndDeltaY moveto
        showEnds (d) eq {(3) show showPrime} if
        showEnds (p) eq {(C) show} if
    grestore
} bind def

/showPrime {
    gsave
        setPrimeFont
        (\242) show
    grestore
} bind def

/setCharColor {         % <character> setCharColor
    dup colorDict exch known {  % known key
        colorDict exch get aload pop sethsbcolor
    } {pop defaultColor aload pop sethsbcolor} ifelse
} bind def

% +++++++++++++++++++++++++ define fonts +++++++++++++++++++++++++
/setTitleFont {
    /Times-Bold findfont titleFontsize scalefont setfont
} bind def

/setLogoFont {
    /Helvetica-Narrow-Bold findfont charWidth scalefont setfont
} bind def

/setStringFont {
    /Helvetica-Bold findfont fontsize scalefont setfont
} bind def

/setPrimeFont {
    /Symbol findfont fontsize scalefont setfont
} bind def

/setSmallFont {
    /Helvetica findfont smallFontsize scalefont setfont
} bind def

/setNumberFont {
    /Helvetica-Bold findfont numberFontSize scalefont setfont
} bind def

% +++++++++++++++++++++++++ take a single character and return the bounding box
/charBox {  % <character> charBox ===> <lx> <ly> <ux> <uy>
    gsave
        newpath
        0 0 moveto
        % take the character off the stack and use it here
        true charpath
        flattenpath
        pathbbox  % compute bounding box of 1 pt. char => lx ly ux uy
        % the path is here, but toss it away ...
    grestore
} bind def

% +++++++++++++++++++++++++ the height of a character's bounding box
/charBoxHeight { % <character> charBoxHeight ===> <num>
    charBox
    exch pop sub neg exch pop
} bind def

% +++++++++++++++++++++++++ the width of a character's bounding box
/charBoxWidth {  % <character> charBoxHeight ===> <num>
    charBox
    pop exch pop sub neg
} bind def

startLogo
startLine
